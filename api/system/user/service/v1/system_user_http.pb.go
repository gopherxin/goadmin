// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.19.4
// source: api/system/user/service/v1/system_user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSystemUserCreateSystemUser = "/api.system.user.service.v1.SystemUser/CreateSystemUser"
const OperationSystemUserGetSystemUser = "/api.system.user.service.v1.SystemUser/GetSystemUser"

type SystemUserHTTPServer interface {
	CreateSystemUser(context.Context, *CreateSystemUserRequest) (*CreateSystemUserReply, error)
	GetSystemUser(context.Context, *GetSystemUserRequest) (*GetSystemUserReply, error)
}

func RegisterSystemUserHTTPServer(s *http.Server, srv SystemUserHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/system/user/create", _SystemUser_CreateSystemUser0_HTTP_Handler(srv))
	r.GET("/v1/system/user/${id}", _SystemUser_GetSystemUser0_HTTP_Handler(srv))
}

func _SystemUser_CreateSystemUser0_HTTP_Handler(srv SystemUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSystemUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSystemUserCreateSystemUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSystemUser(ctx, req.(*CreateSystemUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSystemUserReply)
		return ctx.Result(200, reply)
	}
}

func _SystemUser_GetSystemUser0_HTTP_Handler(srv SystemUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSystemUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSystemUserGetSystemUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSystemUser(ctx, req.(*GetSystemUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSystemUserReply)
		return ctx.Result(200, reply)
	}
}

type SystemUserHTTPClient interface {
	CreateSystemUser(ctx context.Context, req *CreateSystemUserRequest, opts ...http.CallOption) (rsp *CreateSystemUserReply, err error)
	GetSystemUser(ctx context.Context, req *GetSystemUserRequest, opts ...http.CallOption) (rsp *GetSystemUserReply, err error)
}

type SystemUserHTTPClientImpl struct {
	cc *http.Client
}

func NewSystemUserHTTPClient(client *http.Client) SystemUserHTTPClient {
	return &SystemUserHTTPClientImpl{client}
}

func (c *SystemUserHTTPClientImpl) CreateSystemUser(ctx context.Context, in *CreateSystemUserRequest, opts ...http.CallOption) (*CreateSystemUserReply, error) {
	var out CreateSystemUserReply
	pattern := "/v1/system/user/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSystemUserCreateSystemUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SystemUserHTTPClientImpl) GetSystemUser(ctx context.Context, in *GetSystemUserRequest, opts ...http.CallOption) (*GetSystemUserReply, error) {
	var out GetSystemUserReply
	pattern := "/v1/system/user/${id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSystemUserGetSystemUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
