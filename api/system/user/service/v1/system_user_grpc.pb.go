// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: api/system/user/service/v1/system_user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemUser_CreateSystemUser_FullMethodName = "/api.system.user.service.v1.SystemUser/CreateSystemUser"
	SystemUser_UpdateSystemUser_FullMethodName = "/api.system.user.service.v1.SystemUser/UpdateSystemUser"
	SystemUser_DeleteSystemUser_FullMethodName = "/api.system.user.service.v1.SystemUser/DeleteSystemUser"
	SystemUser_GetSystemUser_FullMethodName    = "/api.system.user.service.v1.SystemUser/GetSystemUser"
	SystemUser_ListSystemUser_FullMethodName   = "/api.system.user.service.v1.SystemUser/ListSystemUser"
)

// SystemUserClient is the client API for SystemUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemUserClient interface {
	CreateSystemUser(ctx context.Context, in *CreateSystemUserRequest, opts ...grpc.CallOption) (*CreateSystemUserReply, error)
	UpdateSystemUser(ctx context.Context, in *UpdateSystemUserRequest, opts ...grpc.CallOption) (*UpdateSystemUserReply, error)
	DeleteSystemUser(ctx context.Context, in *DeleteSystemUserRequest, opts ...grpc.CallOption) (*DeleteSystemUserReply, error)
	GetSystemUser(ctx context.Context, in *GetSystemUserRequest, opts ...grpc.CallOption) (*GetSystemUserReply, error)
	ListSystemUser(ctx context.Context, in *ListSystemUserRequest, opts ...grpc.CallOption) (*ListSystemUserReply, error)
}

type systemUserClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemUserClient(cc grpc.ClientConnInterface) SystemUserClient {
	return &systemUserClient{cc}
}

func (c *systemUserClient) CreateSystemUser(ctx context.Context, in *CreateSystemUserRequest, opts ...grpc.CallOption) (*CreateSystemUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSystemUserReply)
	err := c.cc.Invoke(ctx, SystemUser_CreateSystemUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemUserClient) UpdateSystemUser(ctx context.Context, in *UpdateSystemUserRequest, opts ...grpc.CallOption) (*UpdateSystemUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSystemUserReply)
	err := c.cc.Invoke(ctx, SystemUser_UpdateSystemUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemUserClient) DeleteSystemUser(ctx context.Context, in *DeleteSystemUserRequest, opts ...grpc.CallOption) (*DeleteSystemUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSystemUserReply)
	err := c.cc.Invoke(ctx, SystemUser_DeleteSystemUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemUserClient) GetSystemUser(ctx context.Context, in *GetSystemUserRequest, opts ...grpc.CallOption) (*GetSystemUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemUserReply)
	err := c.cc.Invoke(ctx, SystemUser_GetSystemUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemUserClient) ListSystemUser(ctx context.Context, in *ListSystemUserRequest, opts ...grpc.CallOption) (*ListSystemUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSystemUserReply)
	err := c.cc.Invoke(ctx, SystemUser_ListSystemUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemUserServer is the server API for SystemUser service.
// All implementations must embed UnimplementedSystemUserServer
// for forward compatibility.
type SystemUserServer interface {
	CreateSystemUser(context.Context, *CreateSystemUserRequest) (*CreateSystemUserReply, error)
	UpdateSystemUser(context.Context, *UpdateSystemUserRequest) (*UpdateSystemUserReply, error)
	DeleteSystemUser(context.Context, *DeleteSystemUserRequest) (*DeleteSystemUserReply, error)
	GetSystemUser(context.Context, *GetSystemUserRequest) (*GetSystemUserReply, error)
	ListSystemUser(context.Context, *ListSystemUserRequest) (*ListSystemUserReply, error)
	mustEmbedUnimplementedSystemUserServer()
}

// UnimplementedSystemUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemUserServer struct{}

func (UnimplementedSystemUserServer) CreateSystemUser(context.Context, *CreateSystemUserRequest) (*CreateSystemUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemUser not implemented")
}
func (UnimplementedSystemUserServer) UpdateSystemUser(context.Context, *UpdateSystemUserRequest) (*UpdateSystemUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemUser not implemented")
}
func (UnimplementedSystemUserServer) DeleteSystemUser(context.Context, *DeleteSystemUserRequest) (*DeleteSystemUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystemUser not implemented")
}
func (UnimplementedSystemUserServer) GetSystemUser(context.Context, *GetSystemUserRequest) (*GetSystemUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemUser not implemented")
}
func (UnimplementedSystemUserServer) ListSystemUser(context.Context, *ListSystemUserRequest) (*ListSystemUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemUser not implemented")
}
func (UnimplementedSystemUserServer) mustEmbedUnimplementedSystemUserServer() {}
func (UnimplementedSystemUserServer) testEmbeddedByValue()                    {}

// UnsafeSystemUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemUserServer will
// result in compilation errors.
type UnsafeSystemUserServer interface {
	mustEmbedUnimplementedSystemUserServer()
}

func RegisterSystemUserServer(s grpc.ServiceRegistrar, srv SystemUserServer) {
	// If the following call pancis, it indicates UnimplementedSystemUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemUser_ServiceDesc, srv)
}

func _SystemUser_CreateSystemUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemUserServer).CreateSystemUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemUser_CreateSystemUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemUserServer).CreateSystemUser(ctx, req.(*CreateSystemUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemUser_UpdateSystemUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemUserServer).UpdateSystemUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemUser_UpdateSystemUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemUserServer).UpdateSystemUser(ctx, req.(*UpdateSystemUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemUser_DeleteSystemUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemUserServer).DeleteSystemUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemUser_DeleteSystemUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemUserServer).DeleteSystemUser(ctx, req.(*DeleteSystemUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemUser_GetSystemUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemUserServer).GetSystemUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemUser_GetSystemUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemUserServer).GetSystemUser(ctx, req.(*GetSystemUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemUser_ListSystemUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemUserServer).ListSystemUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemUser_ListSystemUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemUserServer).ListSystemUser(ctx, req.(*ListSystemUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemUser_ServiceDesc is the grpc.ServiceDesc for SystemUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.system.user.service.v1.SystemUser",
	HandlerType: (*SystemUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSystemUser",
			Handler:    _SystemUser_CreateSystemUser_Handler,
		},
		{
			MethodName: "UpdateSystemUser",
			Handler:    _SystemUser_UpdateSystemUser_Handler,
		},
		{
			MethodName: "DeleteSystemUser",
			Handler:    _SystemUser_DeleteSystemUser_Handler,
		},
		{
			MethodName: "GetSystemUser",
			Handler:    _SystemUser_GetSystemUser_Handler,
		},
		{
			MethodName: "ListSystemUser",
			Handler:    _SystemUser_ListSystemUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/system/user/service/v1/system_user.proto",
}
